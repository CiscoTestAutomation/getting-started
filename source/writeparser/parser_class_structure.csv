Line,Description,
:monospace:`class ShowLispSession(ShowLispSessionSchema):`,Defines the parser class and the schema class that it inherits.,
:monospace:`cli_command = 'show lisp session'`,Tells the parser to run a specific show command or commands.,
":monospace:`def cli(self, output=None):`","This is a Python function that tells the parser to execute the ``cli_command``, store the output in the variable ``out``, and perform the pattern matching on the string captured by the variable ``out`` to create the Python dictionary.",
:monospace:`parsed_dict = {}`,Initializes the parsed and structured output in the Python dictionary object named ``parsed_dict``.,
":monospace:`p1 = re.compile...` |br|
:monospace:`p2 = re.compile…`","Defines the regex for each line of device output. ``re.compile`` is a Python module that performs regex matching operations.

In this example of router output, each line of output has unique values, but the pattern is repeated for each vrf.   For example:
* vrf default
* vrf red might have a total of 15 sessions with 5 established. vrf name 'default' has 3 sessions with 3 established.

For ``p1``, the search pattern matches on the keys from a specific line of the device output. Each line has unique output values but the pattern of the line is repeated for each vrf.

``p1`` defines the search pattern for the first line of device output, specifically, the session details. ","vrf blue, vrf red, unique lines but lines with repeated patterns"
":monospace:`for line in out.splitlines():` |br|
:monospace:`line = line.strip()`","Tells the parser to ""loop"" over each line of the device output and test each line against the regex pattern. ""Splitlines"" breaks the output into individual lines. ""Strip"" removes leading and trailing spaces before and after the matched pattern.",
:monospace:`m = p1.match(line)`,Creates an object ``m`` that contains the matched patterns for the line associated with p1.,
:monospace:`if m:` (and the code that follows),"If a line matches the regex pattern, tells the parser to create the key-value pairs defined in the schema. (Note to self: m contains more than the dictionary, so you have to define variables for the dictionary…vrf is a subset of the variable group, this all makes the structure of the schema",
:monospace:`return parsed_dict`,"After the loop reaches the last line, ends the execution of the parser and returns the parsed output as a Python dictionary.",
