General Guidelines
==================

Environment Requirements
------------------------
* Test suites, by default, shall not presume (depend on) any pre-existing 
  configuration of the environment (e.g. routers, switches), and shall always 
  perform its own configurations, unless explicitly coded to be and/or 
  provided/told otherwise.

* Test suites shall always leave the environment (e.g. routers and switches) 
  in the same state as they were found in (before the script started), 
  regardless of its results and whether any errors occurred.

* Test suites shall support both real and virtual (simulated) 
  environment/hardware seamlessly.

* Test suites shall be able to support a wide variety of execution environments,
  eg: Jenkins, docker containers, VMs, etc.

Headers & Comments
------------------

* All files (modules) shall have headers using Python docstring notation, 
  describing in detail its author, support contacts, purpose, description, 
  usages & etc.

* All classes, functions, methods shall have headers using Python docstring 
  notation, describing its purpose, usage, arguments, return values and 
  providing examples.

* Code blocks shall be commented, describing its steps and purpose

* Convoluted logic shall be commented, including descriptions for each 
  logic path.

* Code changes shall have in-line comments before the change, with the bug ID 
  and a brief explanation of what’s changed.

Libraries & Packages
--------------------

* All users shall prioritize using and contributing to genie libraries. 
  Uplifts should be made as needed with the required review process.

* Library & package requirements shall be clearly identified within the
  script header

* Libraries & packages should be leveraging Genie abstraction concept/solution 
  whenever possible

* All import statements shall be explicit and shall occur at the top of the file
 
* Traffic generation/control shall be done by using central, common functions
  and libraries.

* All configurations shall be done/generated by calling functions/classes and 
  providing them with corresponding parameter values. These functions/classes 
  should belong to common libraries.

* All device output parsing (including screen scraping) shall be done using 
  common library parsers. 

Errors & Exceptions
-------------------

* All exceptions and errors (including expected ones) shall be logged. 
  Avoid silent exceptions

* Exception catching shall be explicit: never blanket catch all exceptions 
  (``except:`` statement without exception class type), or catching for 
  ``BaseException`` types.

* All code should prefer raising built-in exceptions whenever possible. Avoid 
  creating excessive new exception types.

* Test suite shall always test for both positive and negative logic paths.

Execution
---------

* Test suite shall be executable through job files (pyats run job execution) 
  and as a standalone script.

* Test suite shall leverage asynchronous (parallel) executions whenever 
  possible.

* Temporary file generation shall be done using python tempfile module, 
  generated under the current runtime directory. All temporary files shall be 
  deleted at the end of the run.

* Test suite shall detect and report any anomalies during execution, such as 
  crash, CPU freeze, memory leaks, etc.

Logging
-------

* Logging shall be done only through using python native logging module and 
  functionality.
* Test suites and libraries shall not contain ``print()`` functions.

* Test suites must log thorough and informative messages describing its 
  actions, purposes, progress and intermediate/final result.

* Point of failures and expected output/behavior/values shall be clearly 
  identified in the log file.

* Test results and any diagnostic information that may be helpful for debugging 
  and bug-raising purposes shall be logged thoroughly.

* Avoid using warnings excessively: in test automation, warnings are typically 
  ignored.

* Test suite should log a test topology diagram per test case if applicable.

Governance
----------

* Core infrastructure changes and feature requests shall follow the governance 
  and priority matrix outlined in pyATS documentation.

* Internally shared and/or externally open-sourced packages and libraries 
  needs to have one or more identified owners. Each and every owner shall be 
  responsible for their own project’s maintenance, and publishing guidelines 
  in their repository README file.

* Each test suite shall have an owner (individual or team), responsible of 
  reviewing pull requests and changes to the test suite.

 
